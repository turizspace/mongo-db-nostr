import { utf8ToBytes } from '@noble/hashes/utils';
declare function encrypt(plaintext: string, conversationKey: Uint8Array, nonce?: Uint8Array): string;
declare function decrypt(payload: string, conversationKey: Uint8Array): string;
export declare const v2: {
    utils: {
        minPlaintextSize: number;
        maxPlaintextSize: number;
        utf8Encode: typeof utf8ToBytes;
        utf8Decode(bytes: Uint8Array): string;
        getConversationKey(privkeyA: string, pubkeyB: string): Uint8Array;
        getMessageKeys(conversationKey: Uint8Array, nonce: Uint8Array): {
            chacha_key: Uint8Array;
            chacha_nonce: Uint8Array;
            hmac_key: Uint8Array;
        };
        calcPaddedLen(len: number): number;
        writeU16BE(num: number): Uint8Array;
        pad(plaintext: string): Uint8Array;
        unpad(padded: Uint8Array): string;
        hmacAad(key: Uint8Array, message: Uint8Array, aad: Uint8Array): Uint8Array;
        decodePayload(payload: string): {
            nonce: Uint8Array;
            ciphertext: Uint8Array;
            mac: Uint8Array;
        };
    };
    encrypt: typeof encrypt;
    decrypt: typeof decrypt;
};
declare const _default: {
    v2: {
        utils: {
            minPlaintextSize: number;
            maxPlaintextSize: number;
            utf8Encode: typeof utf8ToBytes;
            utf8Decode(bytes: Uint8Array): string;
            getConversationKey(privkeyA: string, pubkeyB: string): Uint8Array;
            getMessageKeys(conversationKey: Uint8Array, nonce: Uint8Array): {
                chacha_key: Uint8Array;
                chacha_nonce: Uint8Array;
                hmac_key: Uint8Array;
            };
            calcPaddedLen(len: number): number;
            writeU16BE(num: number): Uint8Array;
            pad(plaintext: string): Uint8Array;
            unpad(padded: Uint8Array): string;
            hmacAad(key: Uint8Array, message: Uint8Array, aad: Uint8Array): Uint8Array;
            decodePayload(payload: string): {
                nonce: Uint8Array;
                ciphertext: Uint8Array;
                mac: Uint8Array;
            };
        };
        encrypt: typeof encrypt;
        decrypt: typeof decrypt;
    };
};
export default _default;
